# workflow uruchamia sie automatycznie po wypchnieciu tagu oraz na żądanie
name: Build and Scan Docker Image

on:
  push:
    tags:
      - '*'                # uruchamia na każdy push tagu
  workflow_dispatch:     # Umożliwia ręczne uruchomienie

# Główny job pipeline’u buduje obraz Dockera dla architektur AMD64 i ARM64. Wykorzystuje akcję Docker Buildx oraz mechanizm cache
jobs:
  #pobierany kod aplikacji
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
# logowanie do DockerHub (dla cache) i GHCR
#za pomocą akcji docker/login-action@v3. Użycie sekretów przechowujących tokeny dostępu
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
#Ustawienie QEMU i buildera
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3 #zapewnia obsługę innych platform

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 #włącza rozszerzony builder Dockera
# Budowanie obrazu z cache
      - name: Build multi-arch image (amd64, arm64) with cache
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          #tagujemy obraz commitem (sha) - unikalny identyfikator builda
          tags: ghcr.io/krzyszt0fk/PAwChO_zadanie2:sha-${{ github.sha }}
          # Użycie cache z DockerHub
          cache-from: type=registry,ref=krzyszt0fk/pawcho_zadanie2_cache:buildcache
          cache-to: type=registry,ref=krzyszt0fk/pawcho_zadanie2_cache:buildcache,mode=max
# po zbudowaniu obrazu skanowanie bezpieczenstwa przez Trivy
      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: image
          image-ref: ghcr.io/krzyszt0fk/PAwChO_zadanie2:sha-${{ github.sha }}
          format: table
          severity: CRITICAL,HIGH        # skanuj tylko pod kątem High/Critical
          ignore-unfixed: true          # pomiń CVE bez dostępnych fixów
          exit-code: 1                  # failuj pipeline, jeśli wykryto poważne CVE
# jesli brak krytycznych zagorożeń - wypchniecie obrazu do rejestru GHCR
      - name: Push version tag to GHCR
        if: ${{ startsWith(github.ref, 'refs/tags/v') && success() }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Tagging image with version $VERSION"
          docker pull ghcr.io/krzyszt0fk/PAwChO_zadanie2:sha-${GITHUB_SHA}
          docker tag ghcr.io/krzyszt0fk/PAwChO_zadanie2:sha-${GITHUB_SHA} ghcr.io/krzyszt0fk/PAwChO_zadanie2:${VERSION}
          docker push ghcr.io/krzyszt0fk/PAwChO_zadanie2:${VERSION}
